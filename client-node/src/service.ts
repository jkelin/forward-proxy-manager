/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.1
 * source: service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace proxy {
    export class ProxyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            url?: string;
            method?: string;
            headers?: Map<string, string>;
            retry_on_codes?: number[];
        } & (({
            priority?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("method" in data && data.method != undefined) {
                    this.method = data.method;
                }
                if ("headers" in data && data.headers != undefined) {
                    this.headers = data.headers;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("retry_on_codes" in data && data.retry_on_codes != undefined) {
                    this.retry_on_codes = data.retry_on_codes;
                }
            }
            if (!this.headers)
                this.headers = new Map();
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get method() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set method(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get headers() {
            return pb_1.Message.getField(this, 3) as any as Map<string, string>;
        }
        set headers(value: Map<string, string>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_priority() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get retry_on_codes() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
        }
        set retry_on_codes(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get _priority() {
            const cases: {
                [index: number]: "none" | "priority";
            } = {
                0: "none",
                4: "priority"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            url?: string;
            method?: string;
            headers?: {
                [key: string]: string;
            };
            priority?: number;
            retry_on_codes?: number[];
        }): ProxyRequest {
            const message = new ProxyRequest({});
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.method != null) {
                message.method = data.method;
            }
            if (typeof data.headers == "object") {
                message.headers = new Map(Object.entries(data.headers));
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.retry_on_codes != null) {
                message.retry_on_codes = data.retry_on_codes;
            }
            return message;
        }
        toObject() {
            const data: {
                url?: string;
                method?: string;
                headers?: {
                    [key: string]: string;
                };
                priority?: number;
                retry_on_codes?: number[];
            } = {};
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.method != null) {
                data.method = this.method;
            }
            if (this.headers != null) {
                data.headers = (Object.fromEntries)(this.headers);
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.retry_on_codes != null) {
                data.retry_on_codes = this.retry_on_codes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.url.length)
                writer.writeString(1, this.url);
            if (this.method.length)
                writer.writeString(2, this.method);
            for (const [key, value] of this.headers) {
                writer.writeMessage(3, this.headers, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.has_priority)
                writer.writeInt64(4, this.priority);
            if (this.retry_on_codes.length)
                writer.writePackedUint32(5, this.retry_on_codes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProxyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProxyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.url = reader.readString();
                        break;
                    case 2:
                        message.method = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.headers as any, reader, reader.readString, reader.readString));
                        break;
                    case 4:
                        message.priority = reader.readInt64();
                        break;
                    case 5:
                        message.retry_on_codes = reader.readPackedUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProxyRequest {
            return ProxyRequest.deserialize(bytes);
        }
    }
    export class ProxyResponseSuccess extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            status?: number;
            headers?: Map<string, string>;
        } & (({
            body?: Uint8Array;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("headers" in data && data.headers != undefined) {
                    this.headers = data.headers;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
            }
            if (!this.headers)
                this.headers = new Map();
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set status(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get headers() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set headers(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get body() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set body(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_body() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _body() {
            const cases: {
                [index: number]: "none" | "body";
            } = {
                0: "none",
                3: "body"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            status?: number;
            headers?: {
                [key: string]: string;
            };
            body?: Uint8Array;
        }): ProxyResponseSuccess {
            const message = new ProxyResponseSuccess({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (typeof data.headers == "object") {
                message.headers = new Map(Object.entries(data.headers));
            }
            if (data.body != null) {
                message.body = data.body;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: number;
                headers?: {
                    [key: string]: string;
                };
                body?: Uint8Array;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.headers != null) {
                data.headers = (Object.fromEntries)(this.headers);
            }
            if (this.body != null) {
                data.body = this.body;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != 0)
                writer.writeInt32(1, this.status);
            for (const [key, value] of this.headers) {
                writer.writeMessage(2, this.headers, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.has_body)
                writer.writeBytes(3, this.body);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProxyResponseSuccess {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProxyResponseSuccess();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.headers as any, reader, reader.readString, reader.readString));
                        break;
                    case 3:
                        message.body = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProxyResponseSuccess {
            return ProxyResponseSuccess.deserialize(bytes);
        }
    }
    export class ProxyResponseError extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            error_type?: ProxyResponseError.ErrorType;
        } & (({
            body?: Uint8Array;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("error_type" in data && data.error_type != undefined) {
                    this.error_type = data.error_type;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
            }
        }
        get error_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, ProxyResponseError.ErrorType.UNKNOWN) as ProxyResponseError.ErrorType;
        }
        set error_type(value: ProxyResponseError.ErrorType) {
            pb_1.Message.setField(this, 1, value);
        }
        get body() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set body(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_body() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _body() {
            const cases: {
                [index: number]: "none" | "body";
            } = {
                0: "none",
                2: "body"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            error_type?: ProxyResponseError.ErrorType;
            body?: Uint8Array;
        }): ProxyResponseError {
            const message = new ProxyResponseError({});
            if (data.error_type != null) {
                message.error_type = data.error_type;
            }
            if (data.body != null) {
                message.body = data.body;
            }
            return message;
        }
        toObject() {
            const data: {
                error_type?: ProxyResponseError.ErrorType;
                body?: Uint8Array;
            } = {};
            if (this.error_type != null) {
                data.error_type = this.error_type;
            }
            if (this.body != null) {
                data.body = this.body;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.error_type != ProxyResponseError.ErrorType.UNKNOWN)
                writer.writeEnum(1, this.error_type);
            if (this.has_body)
                writer.writeBytes(2, this.body);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProxyResponseError {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProxyResponseError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.error_type = reader.readEnum();
                        break;
                    case 2:
                        message.body = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProxyResponseError {
            return ProxyResponseError.deserialize(bytes);
        }
    }
    export namespace ProxyResponseError {
        export enum ErrorType {
            UNKNOWN = 0,
            INVALID_URL = 1,
            PROXY_ERROR = 2,
            REMOTE_HOST_TIMED_OUT = 3,
            REMOTE_HOST_UNREACHABLE = 4
        }
    }
    export class ProxyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            success?: ProxyResponseSuccess;
            error?: never;
        } | {
            success?: never;
            error?: ProxyResponseError;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get success() {
            return pb_1.Message.getWrapperField(this, ProxyResponseSuccess, 1) as ProxyResponseSuccess;
        }
        set success(value: ProxyResponseSuccess) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_success() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, ProxyResponseError, 2) as ProxyResponseError;
        }
        set error(value: ProxyResponseError) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get response() {
            const cases: {
                [index: number]: "none" | "success" | "error";
            } = {
                0: "none",
                1: "success",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            success?: ReturnType<typeof ProxyResponseSuccess.prototype.toObject>;
            error?: ReturnType<typeof ProxyResponseError.prototype.toObject>;
        }): ProxyResponse {
            const message = new ProxyResponse({});
            if (data.success != null) {
                message.success = ProxyResponseSuccess.fromObject(data.success);
            }
            if (data.error != null) {
                message.error = ProxyResponseError.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: ReturnType<typeof ProxyResponseSuccess.prototype.toObject>;
                error?: ReturnType<typeof ProxyResponseError.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_success)
                writer.writeMessage(1, this.success, () => this.success.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProxyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProxyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.success, () => message.success = ProxyResponseSuccess.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = ProxyResponseError.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProxyResponse {
            return ProxyResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedProxyService {
        static definition = {
            SendRequest: {
                path: "/proxy.Proxy/SendRequest",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ProxyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ProxyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ProxyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ProxyResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SendRequest(call: grpc_1.ServerUnaryCall<ProxyRequest, ProxyResponse>, callback: grpc_1.sendUnaryData<ProxyResponse>): void;
    }
    export class ProxyClient extends grpc_1.makeGenericClientConstructor(UnimplementedProxyService.definition, "Proxy", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        SendRequest: GrpcUnaryServiceInterface<ProxyRequest, ProxyResponse> = (message: ProxyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ProxyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ProxyResponse>, callback?: grpc_1.requestCallback<ProxyResponse>): grpc_1.ClientUnaryCall => {
            return super.SendRequest(message, metadata, options, callback);
        };
    }
}
